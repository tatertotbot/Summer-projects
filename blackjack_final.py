# -*- coding: utf-8 -*-
"""BlackJack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/johnczontos/BellarmineSummerDays/blob/blackJack/BlackJack.ipynb
"""

import random

class Deck:
    def __init__(self):
        self.stack = [('A', 11), ('2', 2), ('3', 3), ('4', 4), ('5', 5), ('6', 6), ('7', 7), ('8', 8), ('9', 9), ('10', 10), ('J', 10), ('Q', 10), ('K', 10)] * 4

    def shuffle(self):
        random.shuffle(self.stack)
        print(self.stack)

    def deal_card(self):
        return self.stack.pop()

# deck1 = Deck()
# deck1.shuffle()

# deck2 = Deck()
# deck2.shuffle()

# print(deck1.deal_card())
# print(deck2.deal_card())

class Dealer:
    def __init__(self):
        self.name = "Dealer"
        self.hand = []
        self.score = 0

class Player:
    def __init__(self, name, funds):
        self.name = name
        self.hand = []
        self.score = 0
        self.funds = funds
        self.bet = 0

    def place_bet(self):
        self.bet = int(input("How much money would you like to bet?"))
        self.funds -= self.bet

    def payout(self):
        self.funds += (self.bet * 2)

    def hit_or_stay(self):
        while True:
            choice = input("Would you like to hit? (y/n)").lower()
            if choice.startswith('y'):
                return True
            elif choice.startswith('n'):
                return False
            else:
                print("invalid input.")

# player1 = Player("John", 100000)
# player1.hit_or_stay()

class Game:
    def __init__(self, name, funds = 1000):
        self.deck = Deck()
        self.player = Player(name, funds)
        self.dealer = Dealer()

    def table_setup(self):
        self.deck.shuffle()
        
        # ask player how much theyed like to bet
        self.player.place_bet()

        # deal cards to the dealer and the player
        self.player.hand.append(self.deck.deal_card())
        self.dealer.hand.append(self.deck.deal_card())
        self.player.hand.append(self.deck.deal_card())
        self.dealer.hand.append(self.deck.deal_card())

        # run the game functionality
        self.play()

    def __str__(self):
        print("Dealer's hand: ", self.dealer.hand)
        self.calculate_score(self.dealer)
        print("Dealer score: ", self.dealer.score)
        print("Players's hand: ", self.player.hand)
        self.calculate_score(self.player)
        print("Player score: ", self.player.score)
        return ''

    def calculate_score(self, player):
        score = 0
        has_ace = False
        for card in player.hand:
            if card[0] == 'A':
                has_ace = True
            score += card[1]

        if has_ace and score > 21:
            score -= 10
        player.score = score

    def play(self):
        while True:
            print(self)
            player_move = self.player.hit_or_stay()

game1 = Game("John", 10000)
print(game1)
game1.table_setup()
print(game1)

arr = [1, 3, 4, 5, 7, 9]

for a in arr:
    print(a)